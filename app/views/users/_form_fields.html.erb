<%= render "govuk_publishing_components/components/input", {
  label: {
    text: "Name"
  },
  name: "user[name]",
  type: "text",
  value: f.object.name,
} %>

<%= render "govuk_publishing_components/components/input", {
  label: {
    text: "Email"
  },
  name: "user[email]",
  type: "email",
  value: f.object.email,
} %>

<% if f.object.persisted? %>
  <% if f.object.invited_but_not_yet_accepted? %>
    <span class="help-block">Changes will trigger a new signup email.</span>
  <% end %>
<% end %>

<% if f.object.unconfirmed_email.present? %>
  <p class="form-group">
    <%= f.label :unconfirmed_email, "Pending email" %>
    <%= f.text_field :unconfirmed_email, readonly: "readonly", disabled: "disabled", class: 'form-control' %>

    <div class="help-block add-bottom-margin">
      <%= link_to "Resend email change", resend_email_change_user_path(f.object), :method => :put, :class => "btn btn-primary add-right-margin" %>
      <%= link_to "Cancel email change", cancel_email_change_user_path(f.object), :method => :delete, :class => "btn btn-danger" %>
    </div>
  </p>
<% end %>

<% if policy(User).assign_role? %>
  <%= render "govuk_publishing_components/components/heading", text: "Role", margin_bottom: 2 %>

  <% role_hints = {
    superadmin: "Superadmins can create and edit all user types and edit applications",
    admin: "Admins can create and edit normal users",
    super_organisation_admin: "Super Organisation Admins can unlock and unsuspend their organisation and related organisation accounts",
    organisation_admin: "Organisation Admins can unlock and unsuspend their organisation accounts",
  }
  %>

  <%= render "govuk_publishing_components/components/radio",
    name: "user[role]",
    items: filtered_user_roles.map(&:humanize).zip(filtered_user_roles).map { |text, value|
      { text: text, value: value, hint_text: role_hints[value.to_sym], checked: (f.object.role == value) }
    }
  %>
<% end %>
<br/>
<%= render "govuk_publishing_components/components/heading", text: "Account security", margin_bottom: 2 %>

<% if policy(User).flag_2sv? %>
  <dl>
    <dd>
      <% if f.object.has_2sv? %>
        <p>2-step verification enabled</p>
        <ul>
          <li>
            <%= link_to 'Reset 2-step verification',
              reset_two_step_verification_user_path(@user),
              data: { confirm: 'Are you sure?' },
              method: :patch
              %><br/>
            Allows user to sign in without a verification code.<br/>
            User will be prompted to set up 2-step verification again the next time they sign in.
          </li>
        </ul>
      <% else %>
        <p>2-step verification not set up</p>
        <p class="checkbox">
          <%= f.label :require_2sv do %>
            <%= f.check_box :require_2sv %> Ask user to set up 2-step verification
          <% end %>
        </p>
      <% end %>
    </dd>
  </dl>
<% end %>

<% if policy(User).assign_organisations? %>
  <p class="form-group">
    <%= f.label :organisation_id, "Organisation" %><br />
    <%= f.select :organisation_id, organisation_options(f), organisation_select_options, { class: "chosen-select form-control", 'data-module' => 'chosen' } %>
  </p>
<% end %>

<h2 class="add-vertical-margins"> <%= "Editable " if (is_org_admin? || is_super_org_admin?) %>Permissions</h2>
<%= render partial: "shared/user_permissions", locals: { user_object: f.object }%>

<% if is_org_admin? || is_super_org_admin? %>
    <h2 class="add-vertical-margins">All Permissions for this user</h2>
    <%= render partial: "app_permissions", locals: { user_object: f.object }%>
<% end %>
