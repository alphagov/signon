#!/usr/bin/env ruby
require_relative "../config/environment"

def application_repo_name(application)
  application.name.downcase.gsub(/\s/, "-")
end

def env_var_path_for_app(application)
  "/etc/govuk/#{application_repo_name(application)}/env.d"
end

def config_path_for_app(application)
  "../../#{application_repo_name(application)}/config/initializers/gds-sso.rb"
end

def values_for_app(application)
  oauth_id_file = File.join(env_var_path_for_app(application), "OAUTH_ID")
  oauth_secret_file = File.join(env_var_path_for_app(application), "OAUTH_SECRET")
  local_config = nil
  if File.exist?(oauth_id_file) && !File.zero?(oauth_id_file) &&
      File.exist?(oauth_secret_file) && !File.zero?(oauth_secret_file)
    # Get the OAuth credentials from the env vars
    local_config = env_var_values_for_app(
      oauth_id_file:,
      oauth_secret_file:,
    ).merge(type: :env_var)
  elsif File.exist?(config_path_for_app(application))
    # Get the OAuth credentials from the gds-sso config file
    local_config = config_values_for_app(config_file: config_path_for_app(application))
                     .merge(type: :config_file)
  end
  local_config
end

def env_var_values_for_app(oauth_id_file:, oauth_secret_file:)
  oauth_id = File.read(oauth_id_file)
  oauth_secret = File.read(oauth_secret_file)
  {
    oauth_id:,
    oauth_secret:,
  }
end

def config_values_for_app(config_file:)
  lines = File.read(config_file).split("\n")
  config = {}
  lines.each do |line|
    next if line =~ Regexp.new(Regexp.escape("GDS::SSO.config do |config|"))
    next if line =~ Regexp.new(/^end/)
    next if line =~ Regexp.new(/^(\s)+?$/)

    key = /config\.([^ ]+)/.match(line).to_a[1]
    value = if /ENV\['[a-z_]+'\]/i.match?(line)
              # We've got a line like this:
              #   config.oauth_id     = ENV['PUBLISHER_OAUTH_ID'] || "an_oauth_id"
              # so extract "an_oauth_id":
              /\|\| ["|'](.+)["|']/.match(line).to_a[1]
            else
              # We've got a line like this:
              #   config.oauth_id     = "an_oauth_id"
              # so extract "an_oauth_id":
              /=\s+?['|"]([^'"]+)['|"]/.match(line).to_a[1]
            end
    config[key.to_sym] = value unless key.nil?
  end
  config
end

def update_application(application:, oauth_id:, oauth_secret:, type:)
  application.redirect_uri = deverise_uri(application.redirect_uri)
  application.home_uri     = deverise_uri(application.home_uri)
  application.uid          = oauth_id
  application.secret       = oauth_secret
  update_type = if type == :env_var
                  "environment variables"
                else
                  "gds-sso config file"
                end
  puts "Updating application #{application.name} from #{update_type}"
  begin
    application.save!
  rescue ActiveRecord::RecordInvalid => e
    puts "ERROR Failed to update #{application.name} because: #{e.message}"
  end
end

def deverise_uri(uri)
  uri.gsub(".integration.publishing.service.gov.uk", ".dev.gov.uk").gsub(/https:/, "http:")
end

puts "Updating SSO config so that it works in development..."
applications = Doorkeeper::Application.where(retired: false)
applications.each do |application|
  local_config = values_for_app(application)
  if local_config.present?
    update_application(
      application:,
      oauth_id: local_config[:oauth_id],
      oauth_secret: local_config[:oauth_secret],
      type: local_config[:type],
    )
  else
    puts "INFO Skipping #{application.name}, as it doesn't use environment"\
    " variables or gds-sso, is not checked out, the repo isn't"\
    " \"#{application_repo_name(application)}\" or the env var directory isn't"\
    " \"#{env_var_directory_name(application)}\"."
  end
end
